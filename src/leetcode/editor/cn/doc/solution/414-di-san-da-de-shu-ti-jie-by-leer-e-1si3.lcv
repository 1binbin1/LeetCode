### 方法一，排序

**解题思路**

将数组从大到小排序后，从头开始遍历数组，通过判断相邻元素是否不同，来统计不同元素的个数。如果能找到三个不同的元素，就返回第三大的元素，否则返回最大的元素。

[参考](https://leetcode.cn/problems/third-maximum-number/solution/di-san-da-de-shu-by-leetcode-solution-h3sp/)

### 代码

* []

```Java
class Solution {
    public int thirdMax(int[] nums) {
        Arrays.sort(nums);
        reverse(nums);
        for (int i = 1, diff = 1; i < nums.length; ++i) {
            if (nums[i] != nums[i - 1] && ++diff == 3) {
                return nums[i];
            }
        }
        return nums[0];
    }

    public void reverse(int[] nums) {
        int left = 0, right = nums.length - 1;
        while (left < right) {
            int temp = nums[left];
            nums[left] = nums[right];
            nums[right] = temp;
            left++;
            right--;
        }
    }
}
```

* []

```Java
class Solution {
    public int thirdMax(int[] nums) {
        Arrays.sort(nums);
        int n = nums.length;
        for (int i = n - 2, diff = 1; i >= 0; --i) {
            if (nums[i] != nums[i + 1]) {
                ++diff;
                if (diff == 3) {
                    return nums[i];
                }
            }
        }
        return nums[n - 1];
    }
}
```

**复杂度分析**

- 时间复杂度：$O(n\log n)$，其中 $n$ 是数组 $\textit{nums}$ 的长度。排序需要 $O(n\log n)$ 的时间。

- 空间复杂度：$O(\log n)$。排序需要的栈空间为 $O(\log n)$。

### 方法二，有序集合

**解题思路**

遍历数组，同时用一个有序集合来维护数组中前三大的数。具体做法是每遍历一个数，就将其插入有序集合，若有序集合的大小超过 $3$，就删除集合中的最小元素。这样可以保证有序集合的大小至多为 $3$，且遍历结束后，若有序集合的大小为 $3$，其最小值就是数组中第三大的数；若有序集合的大小不足 $3$，那么就返回有序集合中的最大值。

[参考](https://leetcode.cn/problems/third-maximum-number/solution/di-san-da-de-shu-by-leetcode-solution-h3sp/)

### 代码

* []

```Java
class Solution {
    public int thirdMax(int[] nums) {
        TreeSet<Integer> set = new TreeSet<>();
        for (int x : nums) {
            set.add(x);
            if (set.size() > 3) {
                set.remove(set.first());
            }
        }
        return set.size() < 3 ? set.last() : set.first();
    }
}
```

**复杂度分析**

- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\textit{nums}$ 的长度。由于有序集合的大小至多为 $3$，插入和删除的时间复杂度可以视作是 $O(1)$ 的，因此时间复杂度为 $O(n)$。

- 空间复杂度：$O(1)$。

### 方法三，一次遍历

**解题思路**

遍历数组，并用三个变量 $a$、$b$ 和 $c$ 来维护数组中的最大值、次大值和第三大值，以模拟方法二中的插入和删除操作。为方便编程实现，将其均初始化为小于数组最小值的元素，视作「无穷小」，比如 $-2^{63}$ 等。

遍历数组，对于数组中的元素 $\textit{num}$：

- 若 $\textit{num}>a$，将 $c$ 替换为 $b$，$b$ 替换为 $a$，$a$ 替换为 $\textit{num}$，这模拟了将 $\textit{num}$ 插入有序集合，并删除有序集合中的最小值的过程；
- 若 $a>\textit{num}>b$，类似地，将 $c$ 替换为 $b$，$b$ 替换为 $\textit{num}$，$a$ 保持不变；
- 若 $b>\textit{num}>c$，类似地，将 $c$ 替换为 $\textit{num}$，$a$ 和 $b$ 保持不变；
- 其余情况不做处理。

遍历结束后，若 $c$ 仍然为 $-2^{63}$，则说明数组中不存在三个或三个以上的不同元素，即第三大的数不存在，返回 $a$，否则返回 $c$。

另一种不依赖元素范围的做法是，将 $a$、$b$ 和 $c$ 初始化为空指针或空对象，视作「无穷小」，并在比较大小前先判断是否为空指针或空对象。遍历结束后，若 $c$ 为空，则说明第三大的数不存在，返回 $a$，否则返回 $c$。

[参考](https://leetcode.cn/problems/third-maximum-number/solution/di-san-da-de-shu-by-leetcode-solution-h3sp/)

### 代码

* []

```Java
class Solution {
    public int thirdMax(int[] nums) {
        long a = Long.MIN_VALUE, b = Long.MIN_VALUE, c = Long.MIN_VALUE;
        for (int x : nums) {
            if (x > a) {
                c = b;
                b = a;
                a = x;
            } else if (x < a && x > b) {
                c = b;
                b = x;
            } else if (x < b && x > c) {
                c = x;
            }
        }
        return c == Long.MIN_VALUE ? (int) a : (int) c;
    }
}
```

* []

```Java
class Solution {
    public int thirdMax(int[] nums) {
        Integer a = null, b = null, c = null;
        for (int x : nums) {
            if (a == null || x > a) {
                c = b;
                b = a;
                a = x;
            } else if (x < a && (b == null || x > b)) {
                c = b;
                b = x;
            } else if (b != null && x < b && (c == null || x > c)) {
                c = x;
            }
        }
        return c == null ? a : c;
    }
}
```

**复杂度分析**

- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\textit{nums}$ 的长度。

- 空间复杂度：$O(1)$。

