## 字符串哈希

若两字符串互为旋转，则「其一字符串」必然为「另一字符串拓展两倍长度后（循环子串）」的子串。

基于此，我们可以使用「字符串哈希」进行求解：先计算 `s2` 的字符串哈希值 `t`，然后构造出 `s1 + s1` 的哈希数组和次方数组，在两数组中检查是否存在长度为 $n$ 的连续子段的哈希值 `cur` 与 `t` 相等。

**不了解字符串哈希的同学可以看前置🧀 : [字符串哈希入门](https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247489813&idx=1&sn=7f3bc18ca390d85b17655f7164d8e660)**

> 一些细节：其他语言可能不像 `Java` 那样存在自然取模，可手动取模，对于自带高精度的语言若不取模会导致单次计算复杂度上升，会 `TLE`。

代码：

* []

```Java
class Solution {
    static int N = 200010, P = 13131;
    static int[] h = new int[N], p = new int[N];
    public boolean isFlipedString(String s1, String s2) {
        if (s1.length() != s2.length()) return false;
        int n = s1.length();
        for (int i = 1; i <= n; i++) h[i] = h[i - 1] * P + s2.charAt(i - 1);
        int t = h[n]; // s2 hash
        s1 = s1 + s1;
        p[0] = 1;
        for (int i = 1; i <= 2 * n; i++) {
            h[i] = h[i - 1] * P + s1.charAt(i - 1);
            p[i] = p[i - 1] * P;
        }
        for (int i = 1; i + n - 1 <= 2 * n; i++) {
            int j = i + n - 1, cur = h[j] - h[i - 1] * p[j - i + 1];
            if (cur == t) return true;
        }
        return false;
    }
}
```

* []

```Python
N, P, MOD = 200010, 13131, 987654321
h, p = [0] * N, [1] * N
class Solution:
    def isFlipedString(self, s1: str, s2: str) -> bool:
        if len(s1) != len(s2):
            return False
        if s1 == s2:
            return True
        n = len(s1)
        for i in range(1, n + 1):
            h[i] = (h[i - 1] * P + ord(s2[i - 1])) % MOD
        t = h[n]
        s1 = s1 + s1
        for i in range(1, 2 * n + 1):
            h[i] = (h[i - 1] * P + ord(s1[i - 1])) % MOD
            p[i] = (p[i - 1] * P) % MOD
        for i in range(1, n + 1):
            j = i + n - 1
            cur = (h[j] - h[i - 1] * p[j - i + 1]) % MOD
            if cur == t:
                return True
        return False
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(n)$

---

## 空间优化

评论区有同学提出，基于解法一，我们可以进行空间优化。

确实，利用定长滚动我们无须额外保存整个哈希数组和次方数组，而可以采用两个变量代替，同时直接的字符串拼接也会产生新字符串导致空间为 $O(n)$，此时可以通过下标取模来代替真实拼接。

但无论如何，这点空间优化意义不大，写来供大家参考吧。

代码：

* []

```Java
class Solution {
    int P = 13131;
    public boolean isFlipedString(String s1, String s2) {
        if (s1.length() != s2.length()) return false;
        if (s1.equals(s2)) return true;
        int n = s1.length();
        int t = 0;
        for (int i = 1; i <= n; i++) t = t * P + s2.charAt(i - 1);
        int hl = 0, hr = 0, p = P;
        for (int i = 1; i < n; i++) {
            hr = hr * P + s1.charAt(i - 1);
            p *= P;
        }
        for (int i = n; i <= 2 * n; i++) {
            int j = i - n + 1;
            hr = hr * P + s1.charAt((i - 1) % n);
            int cur = hr - hl * p;
            if (cur == t) return true;
            hl = hl * P + s1.charAt((j - 1) % n);
        }
        return false;
    }
}
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(1)$

