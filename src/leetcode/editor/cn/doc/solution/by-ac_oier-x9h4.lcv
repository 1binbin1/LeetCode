## 值域映射 + 树状数组 + 二分

除了直接对数组进行排序，取第 $k$ 位的 $O(n\log{n})$ 做法以外。

对于值域大小 小于 数组长度本身时，我们还能使用「树状数组 + 二分」的 $O(n\log{m})$ 做法，其中 $m$ 为值域大小。

首先值域大小为 $[-10^4, 10^4]$，为了方便，我们为每个 $nums[i]$ 增加大小为 $1e4 + 10$ 的偏移量，将值域映射到 $[10, 2 \times 10^4 + 10]$ 的空间。

将每个增加偏移量后的 $nums[i]$ 存入树状数组，考虑在 $[0, m)$ 范围内进行二分，假设我们真实第 $k$ 大的值为 $t$，那么在以 $t$ 为分割点的数轴上，具有二段性质：

* 在 $[0, t]$ 范围内的数 $cur$ 满足「树状数组中大于等于 $cur$ 的数不低于 $k$ 个」
* 在 $(t, m)$ 范围内的数 $cur$ 不满足「树状数组中大于等于 $cur$ 的数不低于 $k$ 个」

二分出结果后再减去刚开始添加的偏移量即是答案。

代码：

* []

```Java
class Solution {
    int M = 10010, N = 2 * M;
    int[] tr = new int[N];
    int lowbit(int x) {
        return x & -x;
    }
    int query(int x) {
        int ans = 0;
        for (int i = x; i > 0; i -= lowbit(i)) ans += tr[i];
        return ans;
    }
    void add(int x) {
        for (int i = x; i < N; i += lowbit(i)) tr[i]++;
    }
    public int findKthLargest(int[] nums, int k) {
        for (int x : nums) add(x + M);
        int l = 0, r = N - 1;
        while (l < r) {
            int mid = l + r + 1 >> 1;
            if (query(N - 1) - query(mid - 1) >= k) l = mid;
            else r = mid - 1;
        }
        return r - M;
    }
}
```

* 时间复杂度：将所有数字放入树状数组复杂度为 $O(n\log{m})$；二分出答案复杂度为 $O(\log^2{m})$，其中 $m = 2 \times 10^4$ 为值域大小。整体复杂度为 $O(n\log{m})$
* 空间复杂度：$O(m)$

---

## 优先队列（堆）

另外一个容易想到的想法是利用优先队列（堆），由于题目要我们求的是第 $k$ 大的元素，因此我们建立一个小根堆。

根据当前队列元素个数或当前元素与栈顶元素的大小关系进行分情况讨论：

* 当优先队列元素不足 $k$ 个，可将当前元素直接放入队列中；
* 当优先队列元素达到 $k$ 个，并且当前元素大于栈顶元素（栈顶元素必然不是答案），可将当前元素放入队列中。

代码：

* []

```Java
class Solution {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> q = new PriorityQueue<>((a,b)->a-b);
        for (int x : nums) {
            if (q.size() < k || q.peek() < x) q.add(x);
            if (q.size() > k) q.poll();
        }
        return q.peek();
    }
}
```

* 时间复杂度：$O(n\log{k})$
* 空间复杂度：$O(k)$

---

## 快速选择

对于给定数组，求解第 $k$ 大元素，且要求线性复杂度，正解为使用「快速选择」做法。

基本思路与「快速排序」一致，每次敲定一个基准值 `x`，根据当前与 `x` 的大小关系，将范围在 $[l, r]$ 的 $nums[i]$ 划分为到两边。

同时利用，利用题目只要求输出第 $k$ 大的值，而不需要对数组进行整体排序，我们只需要根据划分两边后，第 $k$ 大数会落在哪一边，来决定对哪边进行递归处理即可。

> 快速排序模板为面试向重点内容，需要重要掌握。

代码：

* []

```Java
class Solution {
    int[] nums;
    int qselect(int l, int r, int k) {
        if (l == r) return nums[k];
        int x = nums[l], i = l - 1, j = r + 1;
        while (i < j) {
            do i++; while (nums[i] < x);
            do j--; while (nums[j] > x);
            if (i < j) swap(i, j);
        }
        if (k <= j) return qselect(l, j, k);
        else return qselect(j + 1, r, k);
    }
    void swap(int i, int j) {
        int c = nums[i];
        nums[i] = nums[j];
        nums[j] = c;
    }
    public int findKthLargest(int[] _nums, int k) {
        nums = _nums;
        int n = nums.length;
        return qselect(0, n - 1, n - k);
    }
}
```

* 时间复杂度：期望 $O(n)$
* 空间复杂度：忽略递归带来的额外空间开销，复杂度为 $O(1)$

