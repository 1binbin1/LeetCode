* 

```
class Solution {
    vector<vector<int>> res;
    vector<int> path;
    // int sum = 0;
public:
    vector<vector<int>> combinationSum3(int k, int n) {
        res.clear();
        path.clear();
        backtracking(k, n, 1);
        return res;
    }
private:
    void backtracking(int k, int n, int startIndex) {
        // 找到目标数组
        if (path.size() == k && n == 0) {
            res.push_back(path);
            return;
        }
        else if (path.size() == k) {
            // 数组和不满足条件，直接返回，无需向下递归
            return;
        }

        // 保证加入新元素后不会使得n变为负数
        for (int i = startIndex; i <= n && i <= 9; i++) {
                path.push_back(i);
                backtracking(k, n - i, i + 1);
                path.pop_back();
        }
    }
};
```

