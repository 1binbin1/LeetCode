最大值，找到**第一个不是9的数字**，将与其相同的都变成0
最小值，将与**第一数字**相同的都变0

### 注意点：

    1.初始数字不会包含前导0

### 思路：

    1. 从高位开始遍历每位数字（一般取余是从低位开始，所以先进后出采用栈来保存每位数字）
    2. 设两个标识位，分别表示第一个不是9的数字，及第一个数字
    3. 遍历过程中，判断当前位是不是需要变化（置9或置0），并累计差值

* 

```
class Solution {
    public int minMaxDifference(int num) {
        Stack<Integer> stack = new Stack<>();        
        while(num != 0){
            stack.push(num%10);
            num /= 10;
        }
        int max = -1;
        int min = -1;
        int ans = 0;        
        while(!stack.isEmpty()) {
            int c = stack.pop();
            if(c != 9 && max == -1){
                max = c;
            }
            if(min == -1) {
                min = c;
            }
            //差值累计
            ans = ans*10 + (c == max ? 9 : c) - (c == min ? 0 : c);
        }
        return ans;
    }
}
```

