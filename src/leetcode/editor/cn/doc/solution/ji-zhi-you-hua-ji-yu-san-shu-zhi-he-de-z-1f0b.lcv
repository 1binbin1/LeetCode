## 前置题目

请先完成 [15. 三数之和](https://leetcode.cn/problems/3sum/)。

[视频讲解](https://www.bilibili.com/video/BV1bP411c7oJ/) [代码](https://leetcode.cn/problems/3sum/solution/shuang-zhi-zhen-xiang-bu-ming-bai-yi-ge-pno55/)

## 思路

思路和 [15. 三数之和](https://leetcode.cn/problems/3sum/solution/shuang-zhi-zhen-xiang-bu-ming-bai-yi-ge-pno55/) 一样，排序后，枚举 $\textit{nums}[a]$ 作为第一个数，枚举 $\textit{nums}[b]$ 作为第二个数，那么问题变成找到另外两个数，使得这四个数的和等于 $\textit{target}$，这可以用**双指针**解决。

优化思路也和视频中讲的一样，对于 $\textit{nums}[a]$ 的枚举：

1. 设 $s=\textit{nums}[a]+\textit{nums}[a+1]+\textit{nums}[a+2]+\textit{nums}[a+3]$。如果 $s > \textit{target}$，由于数组已经排序，后面无论怎么选，选出的四个数的和不会比 $s$ 还小，所以后面不会找到等于 $\textit{target}$ 的四数之和了。所以只要 $s > \textit{target}$，就可以直接 `break` 外层循环了。

2. 设 $s=\textit{nums}[a]+\textit{nums}[n-3]+\textit{nums}[n-2]+\textit{nums}[n-1]$。如果 $s < \textit{target}$，由于数组已经排序，$\textit{nums}[a]$ 加上后面任意三个数都不会超过 $s$，所以无法在后面找到另外三个数与 $\textit{nums}[a]$ 相加等于 $\textit{target}$。但是后面还有更大的 $\textit{nums}[a]$，可能出现四数之和等于 $\textit{target}$ 的情况，所以还需要继续枚举，`continue` 外层循环。

3. 如果 $a>0$ 且 $\textit{nums}[a]=\textit{nums}[a-1]$，那么 $\textit{nums}[a]$ 和后面数字相加的结果，必然在之前算出过，所以无需执行后续代码，直接 `continue` 外层循环。（可以放在循环开头判断。）

对于 $\textit{nums}[b]$ 的枚举（$b$ 从 $a+1$ 开始），也同样有类似优化：

1. 设 $s=\textit{nums}[a]+\textit{nums}[b]+\textit{nums}[b+1]+\textit{nums}[b+2]$。如果 $s > \textit{target}$，由于数组已经排序，后面无论怎么选，选出的四个数的和不会比 $s$ 还小，所以后面不会找到等于 $\textit{target}$ 的四数之和了。所以只要 $s > \textit{target}$，就可以直接 `break`。

2. 设 $s=\textit{nums}[a]+\textit{nums}[b]+\textit{nums}[n-2]+\textit{nums}[n-1]$。如果 $s < \textit{target}$，由于数组已经排序，$\textit{nums}[a]+\textit{nums}[b]$ 加上后面任意两个数都不会超过 $s$，所以无法在后面找到另外两个数与 $\textit{nums}[a]$ 和 $\textit{nums}[b]$ 相加等于 $\textit{target}$。但是后面还有更大的 $\textit{nums}[b]$，可能出现四数之和等于 $\textit{target}$ 的情况，所以还需要继续枚举，`continue`。

3. 如果 $b>a+1$ 且 $\textit{nums}[b]=\textit{nums}[b-1]$，那么 $\textit{nums}[b]$ 和后面数字相加的结果，必然在之前算出过，所以无需执行后续代码，直接 `continue`。注意这里 $b>a+1$ 的判断是必须的，如果不判断，对于示例 2 这样的数据，会直接 `continue`，漏掉符合要求的答案。

对于 Java/C++ 等语言，注意相加结果可能会超过 $32$ 位整数范围，需要用 $64$ 位整数存储四数之和。

* [sol-Python3]

```py
class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        nums.sort()
        ans = []
        n = len(nums)
        for a in range(n - 3):  # 枚举第一个数
            x = nums[a]
            if a and x == nums[a - 1]:  # 跳过重复数字
                continue
            if x + nums[a + 1] + nums[a + 2] + nums[a + 3] > target:  # 优化一
                break
            if x + nums[-3] + nums[-2] + nums[-1] < target:  # 优化二
                continue
            for b in range(a + 1, n - 2):  # 枚举第二个数
                y = nums[b]
                if b > a + 1 and y == nums[b - 1]:  # 跳过重复数字
                    continue
                if x + y + nums[b + 1] + nums[b + 2] > target:  # 优化一
                    break
                if x + y + nums[-2] + nums[-1] < target:  # 优化二
                    continue
                # 双指针枚举第三个数和第四个数
                c = b + 1
                d = n - 1
                while c < d:
                    s = x + y + nums[c] + nums[d]  # 四数之和
                    if s > target:
                        d -= 1
                    elif s < target:
                        c += 1
                    else:  # s == target
                        ans.append([x, y, nums[c], nums[d]])
                        c += 1
                        while c < d and nums[c] == nums[c - 1]:  # 跳过重复数字
                            c += 1
                        d -= 1
                        while d > c and nums[d] == nums[d + 1]:  # 跳过重复数字
                            d -= 1
        return ans
```

* [sol-Java]

```java
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        List<List<Integer>> ans = new ArrayList<>();
        int n = nums.length;
        for (int a = 0; a < n - 3; a++) { // 枚举第一个数
            long x = nums[a]; // 使用 long 避免溢出
            if (a > 0 && x == nums[a - 1]) continue; // 跳过重复数字
            if (x + nums[a + 1] + nums[a + 2] + nums[a + 3] > target) break; // 优化一
            if (x + nums[n - 3] + nums[n - 2] + nums[n - 1] < target) continue; // 优化二
            for (int b = a + 1; b < n - 2; b++) { // 枚举第二个数
                long y = nums[b];
                if (b > a + 1 && y == nums[b - 1]) continue; // 跳过重复数字
                if (x + y + nums[b + 1] + nums[b + 2] > target) break; // 优化一
                if (x + y + nums[n - 2] + nums[n - 1] < target) continue; // 优化二
                int c = b + 1, d = n - 1;
                while (c < d) { // 双指针枚举第三个数和第四个数
                    long s = x + y + nums[c] + nums[d]; // 四数之和
                    if (s > target) d--;
                    else if (s < target) c++;
                    else { // s == target
                        ans.add(List.of((int) x, (int) y, nums[c], nums[d]));
                        for (c++; c < d && nums[c] == nums[c - 1]; c++) ; // 跳过重复数字
                        for (d--; d > c && nums[d] == nums[d + 1]; d--) ; // 跳过重复数字
                    }
                }
            }
        }
        return ans;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    vector<vector<int>> fourSum(vector<int> &nums, int target) {
        sort(nums.begin(), nums.end());
        vector<vector<int>> ans;
        int n = nums.size();
        for (int a = 0; a < n - 3; a++) { // 枚举第一个数
            long long x = nums[a]; // 使用 long long 避免溢出
            if (a > 0 && x == nums[a - 1]) continue; // 跳过重复数字
            if (x + nums[a + 1] + nums[a + 2] + nums[a + 3] > target) break; // 优化一
            if (x + nums[n - 3] + nums[n - 2] + nums[n - 1] < target) continue; // 优化二
            for (int b = a + 1; b < n - 2; b++) { // 枚举第二个数
                long long y = nums[b];
                if (b > a + 1 && y == nums[b - 1]) continue; // 跳过重复数字
                if (x + y + nums[b + 1] + nums[b + 2] > target) break; // 优化一
                if (x + y + nums[n - 2] + nums[n - 1] < target) continue; // 优化二
                int c = b + 1, d = n - 1;
                while (c < d) { // 双指针枚举第三个数和第四个数
                    long long s = x + y + nums[c] + nums[d]; // 四数之和
                    if (s > target) d--;
                    else if (s < target) c++;
                    else { // s == target
                        ans.push_back({(int) x, (int) y, nums[c], nums[d]});
                        for (c++; c < d && nums[c] == nums[c - 1]; c++); // 跳过重复数字
                        for (d--; d > c && nums[d] == nums[d + 1]; d--); // 跳过重复数字
                    }
                }
            }
        }
        return ans;
    }
};
```

* [sol-Go]

```go
func fourSum(nums []int, target int) (ans [][]int) {
    sort.Ints(nums)
    n := len(nums)
    for a := 0; a < n-3; a++ { // 枚举第一个数
        x := nums[a]
        if a > 0 && x == nums[a-1] { // 跳过重复数字
            continue
        }
        if x+nums[a+1]+nums[a+2]+nums[a+3] > target { // 优化一
            break
        }
        if x+nums[n-3]+nums[n-2]+nums[n-1] < target { // 优化二
            continue
        }
        for b := a + 1; b < n-2; b++ { // 枚举第二个数
            y := nums[b]
            if b > a+1 && y == nums[b-1] { // 跳过重复数字
                continue
            }
            if x+y+nums[b+1]+nums[b+2] > target { // 优化一
                break
            }
            if x+y+nums[n-2]+nums[n-1] < target { // 优化二
                continue
            }
            c, d := b+1, n-1
            for c < d { // 双指针枚举第三个数和第四个数
                s := x + y + nums[c] + nums[d] // 四数之和
                if s > target {
                    d--
                } else if s < target {
                    c++
                } else {
                    ans = append(ans, []int{x, y, nums[c], nums[d]})
                    for c++; c < d && nums[c] == nums[c-1]; c++ {} // 跳过重复数字
                    for d--; d > c && nums[d] == nums[d+1]; d-- {} // 跳过重复数字
                }
            }
        }
    }
    return
}
```

* [sol-JavaScript]

```js
var fourSum = function (nums, target) {
    nums.sort((a, b) => a - b);
    const n = nums.length;
    let ans = [];
    for (let a = 0; a < n - 3; a++) { // 枚举第一个数
        const x = nums[a]; // 使用 long long 避免溢出
        if (a > 0 && x === nums[a - 1]) continue; // 跳过重复数字
        if (x + nums[a + 1] + nums[a + 2] + nums[a + 3] > target) break; // 优化一
        if (x + nums[n - 3] + nums[n - 2] + nums[n - 1] < target) continue; // 优化二
        for (let b = a + 1; b < n - 2; b++) { // 枚举第二个数
            const y = nums[b];
            if (b > a + 1 && y === nums[b - 1]) continue; // 跳过重复数字
            if (x + y + nums[b + 1] + nums[b + 2] > target) break; // 优化一
            if (x + y + nums[n - 2] + nums[n - 1] < target) continue; // 优化二
            let c = b + 1, d = n - 1;
            while (c < d) { // 双指针枚举第三个数和第四个数
                const s = x + y + nums[c] + nums[d]; // 四数之和
                if (s > target) d--;
                else if (s < target) c++;
                else { // s == target
                    ans.push([x, y, nums[c], nums[d]]);
                    for (c++; c < d && nums[c] === nums[c - 1]; c++); // 跳过重复数字
                    for (d--; d > c && nums[d] === nums[d + 1]; d--); // 跳过重复数字
                }
            }
        }
    }
    return ans;
};
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n^3)$，其中 $n$ 为 $\textit{nums}$ 的长度。排序 $\mathcal{O}(n\log n)$。两重循环枚举第一个数和第二个数，然后 $\mathcal{O}(n)$ 双指针枚举第三个数和第四个数。所以总的时间复杂度为 $\mathcal{O}(n^3)$。
- 空间复杂度：$\mathcal{O}(1)$。忽略返回值和排序的栈开销，仅用到若干变量。

## 相似题目

- [167. 两数之和 II - 输入有序数组](https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted)
- [15. 三数之和](https://leetcode.cn/problems/3sum/)
- [16. 最接近的三数之和](https://leetcode.cn/problems/3sum-closest/)
- [611. 有效三角形的个数](https://leetcode.com/problems/valid-triangle-number/)

[往期每日一题题解（按 tag 分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)
