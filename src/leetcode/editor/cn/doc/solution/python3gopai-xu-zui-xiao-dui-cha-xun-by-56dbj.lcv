> Problem: [1851. 包含每个查询的最小区间](https://leetcode.cn/problems/minimum-interval-to-include-each-query/description/)

# 思路

1. 将区间和查询进行排序：首先，对区间和查询进行排序。对于区间，按照区间的起始位置进行排序；对于查询，按照查询的数值进行排序。这样做的目的是为了优化后续的查询操作。

2. 使用最小堆：创建一个最小堆，用于存储区间的长度和区间的结束位置。初始时，将所有的区间加入最小堆。

3. 进行查询：对于每个查询，从最小堆中取出当前长度最小的区间，判断该区间是否包含查询的数值。如果包含，则将区间的长度加入结果列表；如果不包含，则继续从最小堆中取出下一个长度最小的区间进行判断。直到找到一个包含查询的区间或者最小堆为空。如果最小堆为空仍未找到包含查询的区间，则将结果列表中对应查询的位置设为-1。

# 复杂度

- 时间复杂度：假设intervals数组的长度为M，queries数组的长度为N。

排序部分的时间复杂度为O(MlogM)和O(NlogN)。
对每个查询进行处理的过程中，每个区间最多会被加入和弹出最小堆一次，因此最小堆的操作的时间复杂度为O(M)。总共处理N个查询，所以处理查询的时间复杂度为O(N*M)。
因此，整体的时间复杂度为O(MlogM + NlogN + N*M)。在最坏情况下，当M和N都接近10^5级别时，整体时间复杂度大约在10^7级别，依然较为高效。

- 空间复杂度：假设intervals数组的长度为M，queries数组的长度为N。

排序所需要的额外空间复杂度为O(M)和O(N)，用于存储排序后的intervals和queries数组的副本。
最小堆所需要的额外空间复杂度为O(M)，用于存储intervalsHeap。
其他额外的空间占用是固定的，可以忽略不计。
因此，整体的空间复杂度为O(M + N)。在最坏情况下，当M和N都接近10^5级别时，整体空间复杂度大约在10^5级别，是一个可接受的范围。

# Code

* []

```Python
from typing import List
import heapq

class Solution:
    def minInterval(self, intervals: List[List[int]], queries: List[int]) -> List[int]:
        sorted_intervals = sorted(intervals, key=lambda x: x[0])  # 按照区间的起始位置进行排序
        sorted_queries = sorted(enumerate(queries), key=lambda x: x[1])  # 按照查询的数值进行排序
        intervals_heap = []
        results = [-1] * len(queries)

        i = 0
        for query_idx, query_value in sorted_queries:
            while i < len(sorted_intervals) and sorted_intervals[i][0] <= query_value:
                interval_start, interval_end = sorted_intervals[i]
                interval_length = interval_end - interval_start + 1
                heapq.heappush(intervals_heap, (interval_length, interval_end))
                i += 1

            while intervals_heap and intervals_heap[0][1] < query_value:
                heapq.heappop(intervals_heap)

            if intervals_heap:
                results[query_idx] = intervals_heap[0][0]

        return results
```

![image.png](https://pic.leetcode.cn/1689618423-XWoUtN-image.png)

* []

```go
type IntervalHeap [][]int

func (h IntervalHeap) Len() int           { return len(h) }
func (h IntervalHeap) Less(i, j int) bool { return h[i][0] < h[j][0] }
func (h IntervalHeap) Swap(i, j int)      { h[i], h[j] = h[j], h[i] }

func (h *IntervalHeap) Push(x interface{}) {
	*h = append(*h, x.([]int))
}

func (h *IntervalHeap) Pop() interface{} {
	old := *h
	n := len(old)
	x := old[n-1]
	*h = old[0 : n-1]
	return x
}

func minInterval(intervals [][]int, queries []int) []int {
	sort.Slice(intervals, func(i, j int) bool {
		return intervals[i][0] < intervals[j][0]
	})

	sortedQueries := make([][2]int, len(queries))
	for i, q := range queries {
		sortedQueries[i] = [2]int{q, i}
	}
	sort.Slice(sortedQueries, func(i, j int) bool {
		return sortedQueries[i][0] < sortedQueries[j][0]
	})

	intervalsHeap := &IntervalHeap{}
	heap.Init(intervalsHeap)

	results := make([]int, len(queries))
	i := 0
	for _, q := range sortedQueries {
		queryValue, queryIdx := q[0], q[1]

		for i < len(intervals) && intervals[i][0] <= queryValue {
			intervalStart, intervalEnd := intervals[i][0], intervals[i][1]
			intervalLength := intervalEnd - intervalStart + 1
			heap.Push(intervalsHeap, []int{intervalLength, intervalEnd})
			i++
		}

		for intervalsHeap.Len() > 0 && (*intervalsHeap)[0][1] < queryValue {
			heap.Pop(intervalsHeap)
		}

		if intervalsHeap.Len() > 0 {
			results[queryIdx] = (*intervalsHeap)[0][0]
		} else {
			results[queryIdx] = -1
		}
	}

	return results
}
```

![image.png](https://pic.leetcode.cn/1689618448-ZPWmEF-image.png)

