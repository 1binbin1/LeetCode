## 前缀和

题目要求：
- `1 <= nums.length <= 10^4`；
- `-1000 <= nums[i] <= 1000`。

最坏情况有，`1000*10^4 < 2^31 - 1`，所以就算把数组 nums 中的所有元素累加起来也不会超出 int 类型的上限和下限。

嗯嗯，安全。

一般地，我们有：**数组之和 = 前缀和 + 后缀和**

对于数组中第 i 个元素的后缀和 suffix_sum 的确定：
- 事先计算所有元素的累加之和 total；
- 再计算其前缀和 prefix_sum；
- 那么可以得到后缀和 `suffix_sum = total - prefix_sum`。

> 注意：计算前缀和与后缀和时，都不需要将 nums[i] 累加进来，这和我们平常的理解不太一样。

然后判断是否有 `prefix_sum == suffix_sum` 就好了。

PS：有多个中心下标存在时，只要求返回最左边那个。那么我们**从左向右遍历**数组来计算前缀和，然后返回找到的第一个就好了。

* C++

```C++
class Solution {
public:
    int pivotIndex(vector<int>& nums) {
        int total = 0;
        // 整体求和
        for (int e : nums) {
            total += e;
        }
        // 从左到右遍历数组
        int prefix_sum = 0, suffix_sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            prefix_sum += nums[i];
            // 偷个懒，既然前缀和不小心加了 nums[i]，那后缀和也加上好了
            suffix_sum = total - prefix_sum + nums[i];
            if (prefix_sum == suffix_sum) {
                return i;
            }
        }
        // 无解就 -1
        return -1;
    }
};
```

时间复杂度 $O(n)$

空间复杂度 $O(1)$

![耶](https://pic.leetcode.cn/1679380619-EPZmwL-image.png)
