    class Solution {
        /**
         * 若 nums[i]>0：因为已经排序好，所以后面不可能有三个数加和等于 0，直接返回结果。
         * 对于重复元素：跳过，避免出现重复解
         * 令左指针 L=i+1，右指针 R=n−1，当 L<R 时，执行循环：
         * 当 nums[i]+nums[L]+nums[R]==0，执行循环，判断左界和右界是否和下一位置重复，去除重复解。并同时将 L,R 移到下一位置，寻找新的解
         * 若和大于 0，说明 nums[R] 太大，R 左移
         * 若和小于 0，说明 nums[L] 太小，L 右移
         *
         * @param nums
         * @return
         */
        public List<List<Integer>> threeSum(int[] nums) {
            int n = nums.length;
            Arrays.sort(nums);
            ArrayList<List<Integer>> ans = new ArrayList<>();
            // 枚举a
            for (int first = 0; first < n; ++first) {
                // 需要和上次枚举的值不一样
                if (first > 0 && nums[first] == nums[first - 1]) {
                    continue;
                }
                int third = n - 1;
                int target = -nums[first];
                for (int second = first + 1; second < n; ++second) {
                    // 需要和上次枚举的值不一样
                    if (second > first + 1 && nums[second] == nums[second - 1]) {
                        continue;
                    }
                    // 保证second在third的左侧
                    while (second < third && nums[second] + nums[third] > target){
                        -- third;
                    }
                    if (second == third) {
                        break;
                    }
                    if (nums[second] + nums[third] == target){
                        ArrayList<Integer> arrayList = new ArrayList<>();
                        arrayList.add(nums[first]);
                        arrayList.add(nums[second]);
                        arrayList.add(nums[third]);
                        ans.add(arrayList);
                    }
                }
            }
            return ans;
        }
    }

//runtime:30 ms
//memory:50.3 MB
